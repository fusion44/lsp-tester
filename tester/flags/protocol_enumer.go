// Code generated by "enumer -type=Protocol -text"; DO NOT EDIT.

package flags

import (
	"fmt"
	"strings"
)

const _ProtocolName = "CommandTCP"

var _ProtocolIndex = [...]uint8{0, 7, 10}

const _ProtocolLowerName = "commandtcp"

func (i Protocol) String() string {
	if i >= Protocol(len(_ProtocolIndex)-1) {
		return fmt.Sprintf("Protocol(%d)", i)
	}
	return _ProtocolName[_ProtocolIndex[i]:_ProtocolIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ProtocolNoOp() {
	var x [1]struct{}
	_ = x[Sub-(0)]
	_ = x[TCP-(1)]
}

var _ProtocolValues = []Protocol{Sub, TCP}

var _ProtocolNameToValueMap = map[string]Protocol{
	_ProtocolName[0:7]:       Sub,
	_ProtocolLowerName[0:7]:  Sub,
	_ProtocolName[7:10]:      TCP,
	_ProtocolLowerName[7:10]: TCP,
}

var _ProtocolNames = []string{
	_ProtocolName[0:7],
	_ProtocolName[7:10],
}

// ProtocolString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ProtocolString(s string) (Protocol, error) {
	if val, ok := _ProtocolNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ProtocolNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Protocol values", s)
}

// ProtocolValues returns all values of the enum
func ProtocolValues() []Protocol {
	return _ProtocolValues
}

// ProtocolStrings returns a slice of all String values of the enum
func ProtocolStrings() []string {
	strs := make([]string, len(_ProtocolNames))
	copy(strs, _ProtocolNames)
	return strs
}

// IsAProtocol returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Protocol) IsAProtocol() bool {
	for _, v := range _ProtocolValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for Protocol
func (i Protocol) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Protocol
func (i *Protocol) UnmarshalText(text []byte) error {
	var err error
	*i, err = ProtocolString(string(text))
	return err
}
